% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ts_avg.R
\name{ts_avg}
\alias{ts_avg}
\title{ts_avg}
\usage{
ts_avg(
  x,
  model_list,
  k,
  h = 1,
  type = c("simple_avg", "simple_avg_n", "dist_avg_n", "dist_avg", "global_avg",
    "perf_avg", "perf_avg_r"),
  xtest_idx = NULL,
  test_multistep = FALSE,
  benchmark = c("rw", "model"),
  detailed_result = FALSE,
  ...
)
}
\arguments{
\item{x}{list of matrices. each matrix corresponds to one time series whereby the first column always corresponds to its index.}

\item{model_list}{a generic model function. the resulting model object must have forecast, refit, fitted, and residuals functions (as demonstrated in my_ets).}

\item{k}{vector of number of neighbors used for each time series in x.}

\item{h}{forecast horizon. if h>1, then multiple forecasts are computed. default=1.}

\item{type}{averaging type. one of  "simple_avg", "simple_avg_n", "dist_avg_n", "dist_avg", "global_avg", "perf_avg", "perf_avg_r".}

\item{xtest_idx}{index to split each time series in train and test set. default = NULL.}

\item{test_multistep}{if TRUE, then multistep-ahead forecasts are performed on test set.}

\item{benchmark}{benchmark forecast type for computing the errors. either random walk forecast "rw" or model forecast "model".}

\item{detailed_result}{if TRUE, a more detailed result object is returned.}

\item{...}{additional parameters for model function}
}
\value{
object of class ts_avg containing
\itemize{
\item data
\item type,
\item forecasts,
\item h,
\item test_multistep,
\item xtest_idx,
\item test_errors,
\item cum_test_errors,
\item neighbors (if detailed_result is TRUE)
}
}
\description{
Perform TS Avg Forecasting for a particular type
}
\examples{
source("demo/my_ets.R")

x <- replicate(5,{
  len <- rpois(1,20)
  cbind(seq(rpois(1,5),length.out=len),matrix(rnorm(2*len),ncol = 2))
  },simplify=FALSE)

model <- list(model = my_ets,
              forecast = forecast.my_ets,
              refit = refit.my_ets,
              fitted = fitted.my_ets,
              residuals = residuals.my_ets)

ts_avg_res <- ts_avg(x,model,h=4,k=2,type="global_avg", xtest_idx = 20)
plot(ts_avg_res)

ts_avg_res_2 <- ts_avg(lapply(x,"[",TRUE,1:2),model,h=2,k=1,type="simple_avg", xtest_idx = 15)
plot(ts_avg_res_2,h=1)

# cv examples
min_ts <- max(unlist(lapply(x, function(xi)min(xi[,1])+3)))
res_mv <- ts_avg.cv(x,model,min_ts=min_ts+1,k_grid=1:4,xtest_idx = 20,verbose=TRUE)

plot(res_mv, "cv")
plot(res_mv, "error")
plot(res_mv, "best")

p <- plot(res_mv$final_model, "error_quants")
plot(ts_avg_res, "error_quants", ref_plot=p)
}
\seealso{
\link{plot.ts_avg}
}
