% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ts_avg.cv.R
\name{ts_avg.cv}
\alias{ts_avg.cv}
\title{ts_avg.cv}
\usage{
ts_avg.cv(
  x,
  model,
  min_ts,
  k_grid,
  type = c("simple_avg", "simple_avg_n", "dist_avg_n", "dist_avg", "global_avg",
    "perf_avg", "perf_avg_r"),
  xtest_idx = NULL,
  benchmark = c("rw", "model"),
  verbose = FALSE,
  test_multistep = FALSE,
  parallel = FALSE,
  ...
)
}
\arguments{
\item{x}{list of matrices. each matrix corresponds to one time series whereby the first column always corresponds to its index.}

\item{model}{a generic model function. the resulting model object must have forecast, refit, fitted, and residuals functions (as demonstrated in my_ets).}

\item{min_ts}{smallest time index to do TSCV, i.e. the first fold contains all time series cut off to 1:min_ts.}

\item{k_grid}{cv grid for k.}

\item{type}{averaging type. subset of  "simple_avg", "simple_avg_n", "dist_avg_n", "dist_avg", "global_avg", "perf_avg", "perf_avg_r". (default is all).}

\item{xtest_idx}{index to split the every time series in train and test set. default = NULL.}

\item{benchmark}{benchmark forecast type for computing the errors. either random walk forecast "rw" or model forecast "model".}

\item{verbose}{if TRUE, then progress is printed.}

\item{test_multistep}{if TRUE, then multistep-ahead forecasts are performed on test set.}

\item{parallel}{either FALSE or number of cores to be used for the doParallel package}

\item{...}{additional parameters for model function}
}
\value{
object of class ts_avg.cv containing
\itemize{
\item best_result for each avg. type
\item best_k for each avg. type
\item final_model
\item cv_results (scores and standard errors)
\item exec_times for each type and k
\item total_exec_time
}
}
\description{
Perform TS Avg Forecasting TS Cross-Validation for specific Avg. Types
}
\details{
The forecast horizon for TSCV and resulting best models is fixed to h=1.
}
\examples{
source("demo/my_ets.R")

x <- replicate(100,{
  len <- rpois(1,20)
  cbind(seq(rpois(1,5),length.out=len),matrix(rnorm(2*len),ncol = 2))
  },simplify=FALSE)

model <- list(model = my_ets,
              forecast = forecast.my_ets,
              refit = refit.my_ets,
              fitted = fitted.my_ets,
              residuals = residuals.my_ets)

ts_avg_res <- ts_avg(
  x,
  model,
  h = 4,
  k = 2,
  type = "global_avg",
  xtest_idx = 20,
  execution_time = TRUE,
  detailed_result = FALSE
)
plot(ts_avg_res)

ts_avg_res_2 <- ts_avg(lapply(x,"[",TRUE,1:2),model,h=2,k=1,type="simple_avg", xtest_idx = 15)
plot(ts_avg_res_2,h=1)

# cv examples
min_ts <- max(unlist(lapply(x, function(xi)min(xi[,1])+3)))
res_mv <- ts_avg.cv(
  x,
  model,
  min_ts = min_ts + 1,
  k_grid = c(1, 10, 20),
  xtest_idx = 20,
  verbose = TRUE
)

plot(res_mv, "cv")
plot(res_mv, "error")
plot(res_mv, "best")

p <- plot(res_mv$final_model, "error_quants")
plot(ts_avg_res, "error_quants", ref_plot=p)
}
\seealso{
\link{plot.ts_avg.cv}
}
